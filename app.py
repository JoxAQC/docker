import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from utils.genetic_algorithm import run_genetic_algorithm
from utils.kubernetes_simulator import evaluate_configuration
from utils.analysis_functions import (
    compare_strategies,
    plot_strategy_comparison,
    sensitivity_analysis,
    plot_sensitivity_results,
    plot_cost_breakdown,
    plot_3d_search_space
)

# Configuraci√≥n de p√°gina
st.set_page_config(page_title="Optimizador Avanzado de Kubernetes", layout="wide", page_icon="‚öôÔ∏è")

# T√≠tulo y descripci√≥n
st.title("‚öôÔ∏è Optimizaci√≥n Avanzada de Configuraciones Kubernetes")
st.markdown("""
Esta herramienta utiliza algoritmos gen√©ticos para encontrar la configuraci√≥n √≥ptima de recursos 
para tus despliegues en Kubernetes, balanceando costo, performance y cumplimiento de SLA.
""")

# Sidebar con par√°metros
with st.sidebar:
    st.header("üîß Par√°metros del Algoritmo")
    population_size = st.slider("Tama√±o de poblaci√≥n", 10, 200, 50)
    generations = st.slider("N√∫mero de generaciones", 5, 150, 30)
    crossover_prob = st.slider("Probabilidad de crossover", 0.1, 1.0, 0.8, 0.05)
    mutation_prob = st.slider("Probabilidad de mutaci√≥n", 0.01, 0.5, 0.15, 0.01)
    
    st.header("üìä Restricciones del SLA")
    min_cpu = st.slider("CPU m√≠nima (cores)", 0.1, 64.0, 2.0, 0.1)
    max_cpu = st.slider("CPU m√°xima (cores)", 0.1, 64.0, 16.0, 0.1)
    min_memory = st.slider("Memoria m√≠nima (GB)", 0.1, 128.0, 4.0, 0.1)
    max_memory = st.slider("Memoria m√°xima (GB)", 0.1, 128.0, 32.0, 0.1)
    min_replicas = st.slider("M√≠nimo de r√©plicas", 1, 50, 2)
    max_replicas = st.slider("M√°ximo de r√©plicas", 1, 100, 10)
    
    workload = st.selectbox("Escenario de carga", ["Baja", "Media", "Alta"], index=1)
    st.markdown("---")
    st.info("‚ÑπÔ∏è Ajusta los par√°metros y haz clic en 'Ejecutar Optimizaci√≥n' para comenzar.")

# Ejecutar optimizaci√≥n
if st.button("üöÄ Ejecutar Optimizaci√≥n", type="primary"):
    with st.spinner("üîç Buscando la configuraci√≥n √≥ptima..."):
        best_config, history, pop = run_genetic_algorithm(
            population_size=population_size,
            generations=generations,
            crossover_prob=crossover_prob,
            mutation_prob=mutation_prob,
            cpu_bounds=(min_cpu, max_cpu),
            memory_bounds=(min_memory, max_memory),
            replicas_bounds=(min_replicas, max_replicas),
            workload=workload
        )
    
    st.success("‚úÖ ¬°Optimizaci√≥n completada!")
    st.balloons()
    
    # Evaluar la mejor configuraci√≥n
    best_eval = evaluate_configuration(best_config, workload)
    
    # Mostrar mejor configuraci√≥n
    st.subheader("üéØ Mejor Configuraci√≥n Encontrada")
    col1, col2, col3 = st.columns(3)
    col1.metric("CPU (cores)", f"{best_config['cpu']:.2f}", 
               help="Cores de CPU asignados por pod")
    col2.metric("Memoria (GB)", f"{best_config['memory']:.2f}", 
               help="Memoria asignada por pod")
    col3.metric("R√©plicas", best_config['replicas'], 
               help="N√∫mero de pods en el cl√∫ster")
    
    # M√©tricas clave
    st.subheader("üìà M√©tricas Clave")
    mcol1, mcol2, mcol3, mcol4 = st.columns(4)
    mcol1.metric("Costo Mensual", f"${best_eval['cost']:,.2f}", 
                help="Costo total estimado por mes")
    mcol2.metric("Performance", f"{best_eval['performance']*100:.1f}%", 
                "Cumple SLA ‚úÖ" if best_eval['sla_compliance'] else "No cumple SLA ‚ùå",
                help="Porcentaje de cumplimiento del SLA")
    mcol3.metric("Eficiencia", f"{best_eval['efficiency_score']:.2f}", 
                help="Puntaje de eficiencia (mayor es mejor)")
    mcol4.metric("Costo/Performance", f"{best_eval['cost_performance_ratio']:.2f}", 
                help="Ratio costo-performance (menor es mejor)")
    
    # Gr√°fico de desglose de costos
    st.plotly_chart(plot_cost_breakdown(best_eval), use_container_width=True)
    
    # Evoluci√≥n del algoritmo
    st.subheader("üìä Evoluci√≥n del Algoritmo Gen√©tico")
    df_history = pd.DataFrame(history)
    
    tab1, tab2, tab3 = st.tabs(["Fitness", "Par√°metros", "Datos Completos"])
    
    with tab1:
        fig_fitness = px.line(df_history, 
                            x='generation', 
                            y=['best_fitness', 'avg_fitness'],
                            labels={'value': 'Fitness', 'generation': 'Generaci√≥n'},
                            title="Evoluci√≥n del Fitness por Generaci√≥n",
                            color_discrete_sequence=px.colors.qualitative.Dark2)
        st.plotly_chart(fig_fitness, use_container_width=True)
    
    with tab2:
        fig_params = make_subplots(rows=1, cols=3, subplot_titles=("CPU", "Memoria", "R√©plicas"))
        
        fig_params.add_trace(
            go.Scatter(x=df_history['generation'], y=df_history['best_cpu'], name='CPU'),
            row=1, col=1
        )
        fig_params.add_trace(
            go.Scatter(x=df_history['generation'], y=df_history['best_memory'], name='Memoria'),
            row=1, col=2
        )
        fig_params.add_trace(
            go.Scatter(x=df_history['generation'], y=df_history['best_replicas'], name='R√©plicas'),
            row=1, col=3
        )
        
        fig_params.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig_params, use_container_width=True)
    
    with tab3:
        st.dataframe(df_history.style
                    .background_gradient(subset=['best_fitness'], cmap='Blues')
                    .format({'best_cpu': '{:.2f}', 'best_memory': '{:.2f}'}))
    
    # Comparaci√≥n con otras estrategias
    st.subheader("üÜö Comparaci√≥n con Otras Estrategias")
    bounds = {
        'cpu': (min_cpu, max_cpu),
        'memory': (min_memory, max_memory),
        'replicas': (min_replicas, max_replicas)
    }
    df_comparison = compare_strategies(best_config, workload, bounds)
    st.plotly_chart(plot_strategy_comparison(df_comparison), use_container_width=True)
    
    # Mostrar tabla comparativa con formato
    st.dataframe(df_comparison.style
                .format({
                    'Costo ($/mes)': '${:,.2f}',
                    'Performance': '{:.2%}',
                    'Costo/Performance': '{:.2f}',
                    'Eficiencia': '{:.2f}'
                })
                .applymap(lambda x: 'color: green' if x == '‚úÖ' else 'color: red', 
                         subset=['Cumple SLA']))
    
    # An√°lisis de sensibilidad
    st.subheader("üìå An√°lisis de Sensibilidad")
    df_sensitivity = sensitivity_analysis(best_config, workload)
    st.plotly_chart(plot_sensitivity_results(df_sensitivity), use_container_width=True)
    
    # Visualizaci√≥n 3D del espacio de b√∫squeda
    st.subheader("üåå Espacio de B√∫squeda 3D")
    st.plotly_chart(plot_3d_search_space(pop, workload, bounds), 
                   use_container_width=True, height=800)

# Secci√≥n de ayuda
with st.expander("‚ÑπÔ∏è ¬øC√≥mo interpretar los resultados?"):
    st.markdown("""
    ### Gu√≠a de Interpretaci√≥n
    
    **1. Configuraci√≥n √ìptima**  
    - La mejor combinaci√≥n de CPU, memoria y r√©plicas encontrada por el algoritmo.
    - Considera tanto el costo como el cumplimiento del SLA.
    
    **2. M√©tricas Clave**  
    - **Costo Mensual**: Estimaci√≥n del costo total de la configuraci√≥n.
    - **Performance**: Porcentaje de cumplimiento del SLA (95%+ es ideal).
    - **Eficiencia**: Balance entre utilizaci√≥n de recursos y costo.
    - **Costo/Performance**: Ratio que debe minimizarse.
    
    **3. Comparaci√≥n de Estrategias**  
    - Compara la soluci√≥n √≥ptima contra enfoques comunes:
      - **Eficiencia en Costo**: Minimiza recursos (puede violar SLA).
      - **Alta Disponibilidad**: Maximiza recursos (costoso).
      - **Balanceado**: Punto medio entre ambos extremos.
    
    **4. An√°lisis de Sensibilidad**  
    - Muestra c√≥mo cambian las m√©tricas al variar cada par√°metro.
    - Ayuda a entender la robustez de la configuraci√≥n √≥ptima.
    
    **5. Espacio de B√∫squeda 3D**  
    - Visualizaci√≥n interactiva de c√≥mo diferentes configuraciones afectan el fitness.
    - El tama√±o de los puntos representa la performance.
    - El color representa el fitness (m√°s oscuro = mejor).
    """)

# Notas finales
st.markdown("---")
st.caption("""
*Nota: Los costos son estimaciones basadas en precios promedio de cloud providers.  
El modelo de performance simula cargas de trabajo t√≠picas pero puede necesitar ajustes para casos espec√≠ficos.*
""")